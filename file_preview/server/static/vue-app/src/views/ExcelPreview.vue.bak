<template>
  <div class="excel-preview-container">
    
    <!-- Office Excel组件 (仅支持xlsx) -->
    <template v-if="isXlsx && !loading">
      <VueOfficeExcel
        v-if="fileUrl"
        :src="fileUrl"
        @rendered="handleRendered"
        @error="handleError"/>
    </template>
    
    
    <!-- 自定义Excel预览 (支持xls) -->
    <template v-else-if="!loading">
      <div class="custom-excel-preview">
        <!-- 主表格区域 -->
        <div class="excel-main-container">
          <!-- 顶部区域：左上角和列标题 -->
          <div class="excel-top-row">
            <div class="excel-corner-cell"></div>
            <div class="excel-headers-wrapper">
              <ExcelHeader 
                ref="columnHeadersRef"
                :columns-array="columnsArray"
                :column-width="columnWidth"
              />
            </div>
          </div>
          
          <!-- 主体区域：行号和表格内容 -->
          <div class="excel-body-row">
            <!-- 行号区域 -->
            <div class="excel-row-numbers-wrapper">
              <ExcelRowNumbers 
                ref="rowNumbersRef"
                :rows-array="rowsArray"
                :row-height="rowHeight"
                :footer-height="tableFooterHeight"
              />
            </div>
            
            <!-- 表格内容区域 -->
            <div class="excel-content-wrapper" ref="contentWrapperRef" @scroll="handleTableScroll">
              <!-- 表格容器 -->
              <div class="excel-scroll-container">
                <ExcelTable 
                  ref="excelTableRef"
                  :processed-data="processedData" 
                  :row-height="rowHeight"
                  :column-width="columnWidth"
                  :footer-height="tableFooterHeight"
                  @scroll="handleTableComponentScroll"
                />
              </div>
            </div>
          </div>
        </div>
        
        <!-- 工作表选项卡 -->
        <ExcelSheetTabs 
          :sheet-names="sheetNames"
          :active-sheet="activeSheet"
          @change="changeSheet"
        />
      </div>
    </template>
    
    <!-- 加载中 -->
    <div v-if="loading" class="loading-container">
      <div class="spinner"></div>
      <p>正在加载Excel文件...</p>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, nextTick, watch, onBeforeUnmount } from 'vue'
import VueOfficeExcel from '@vue-office/excel'
//引入相关样式
import '@vue-office/excel/lib/index.css'
import * as XLSX from 'xlsx'
import ExcelJS from 'exceljs'
import { ElMessage } from 'element-plus'

// 导入自定义组件
import ExcelHeader from '../components/excel/ExcelHeader.vue'
import ExcelRowNumbers from '../components/excel/ExcelRowNumbers.vue'
import ExcelTable from '../components/excel/ExcelTable.vue'
import ExcelSheetTabs from '../components/excel/ExcelSheetTabs.vue'

const props = defineProps({
  filePath: {
    type: String,
    required: true
  },
  fileType: {
    type: String,
    required: true
  },
  fileId: {
    type: String,
    required: true
  }
})

const loading = ref(true)
const fileName = ref('')
const fileUrl = ref('')
const isXlsx = ref(false)

// 表格配置
const rowHeight = ref(25)
const columnWidth = ref(100)
const tableFooterHeight = ref(80) // 统一的表格底部留白高度

// 表格数据
const rawData = ref([])
const processedData = ref([])
const columnsArray = ref([])
const rowsArray = ref([])
const sheetNames = ref([])
const activeSheet = ref('')
const mergedCells = ref([])

// 组件引用
const columnHeadersRef = ref(null)
const rowNumbersRef = ref(null)
const excelTableRef = ref(null)
const contentWrapperRef = ref(null)

// 滚动节流
let scrollTimer = null

// 处理表格滚动事件（从容器直接滚动）
function handleTableScroll(e) {
  // 使用requestAnimationFrame优化滚动性能和同步精度
  requestAnimationFrame(() => {
    syncScrollPosition(e.target.scrollLeft, e.target.scrollTop);
  });
}

// 处理表格组件发出的滚动事件
function handleTableComponentScroll({ scrollLeft, scrollTop }) {
  requestAnimationFrame(() => {
    syncScrollPosition(scrollLeft, scrollTop);
  });
}

// 同步滚动位置到所有相关组件
function syncScrollPosition(scrollLeft, scrollTop) {
  // 同步列标题的水平滚动
  if (columnHeadersRef.value) {
    columnHeadersRef.value.syncScroll(scrollLeft);
  }
  
  // 同步行号的垂直滚动
  if (rowNumbersRef.value && scrollTop !== undefined) {
    rowNumbersRef.value.syncScroll(scrollTop);
  }
}

// 处理合并单元格
function processMergedCells(worksheet) {
  if (!worksheet['!merges']) return []
  
  return worksheet['!merges'].map(merge => {
    return {
      startRow: merge.s.r,
      endRow: merge.e.r,
      startCol: merge.s.c,
      endCol: merge.e.c,
      rowspan: merge.e.r - merge.s.r + 1,
      colspan: merge.e.c - merge.s.c + 1
    }
  })
}

// 将单元格引用转换为行列索引，如 A1 => {row: 0, col: 0}
function cellRefToRowCol(cellRef) {
  // 匹配字母部分和数字部分
  const match = cellRef.match(/([A-Z]+)([0-9]+)/)
  if (!match) return null
  
  const colStr = match[1]
  const rowStr = match[2]
  
  // 将字母转换为列索引 (A=0, B=1, ...)
  let colIndex = 0
  for (let i = 0; i < colStr.length; i++) {
    colIndex = colIndex * 26 + colStr.charCodeAt(i) - 64
  }
  colIndex-- // 0-based index
  
  // 行号转为索引
  const rowIndex = parseInt(rowStr) - 1
  
  return { row: rowIndex, col: colIndex }
}

// 计算并处理表格数据
function processTableData() {
  // 确保有至少一行数据
  if (rawData.value.length === 0) {
    processedData.value = Array(10).fill().map(() => Array(26).fill(''));
    columnsArray.value = Array(26).fill(0);
    rowsArray.value = Array(10).fill(0);
    return;
  }

  // 找出最大列数
  const maxCols = Math.max(
    26, // 至少26列
    ...rawData.value.map(row => Array.isArray(row) ? row.length : 0)
  );
  
  // 处理数据，确保所有行具有相同列数
  let data = rawData.value.map(row => {
    // 填充不足的列
    return Array(maxCols).fill('').map((_, i) => {
      if (!Array.isArray(row)) return '';
      return row[i] !== undefined ? row[i] : '';
    });
  });
  
  // 应用合并单元格
  if (mergedCells.value.length > 0) {
    mergedCells.value.forEach(merge => {
      // 设置左上角单元格为合并单元格
      if (data[merge.startRow] && data[merge.startRow][merge.startCol] !== undefined) {
        const cellValue = data[merge.startRow][merge.startCol];
        
        // 创建合并单元格对象
        const mergedCell = {
          value: cellValue,
          rowspan: merge.rowspan,
          colspan: merge.colspan
        };
        
        // 更新左上角单元格为合并单元格对象
        data[merge.startRow][merge.startCol] = mergedCell;
        
        // 将其他被合并的单元格设置为null或空字符串
        for (let r = merge.startRow; r <= merge.endRow; r++) {
          for (let c = merge.startCol; c <= merge.endCol; c++) {
            if (r !== merge.startRow || c !== merge.startCol) {
              if (data[r]) {
                data[r][c] = null; // 将合并区域内的其他单元格置为null
              }
            }
          }
        }
      }
    });
  }
  
  processedData.value = data;
  
  // 创建列和行的数组用于渲染
  columnsArray.value = Array(maxCols).fill(0);
  rowsArray.value = Array(data.length).fill(0); // 修复：确保行数组与数据长度一致
  
  console.log(`总行数: ${data.length}, 总列数: ${maxCols}`); // 添加日志帮助调试
  
  // 更新组件视图
  nextTick(() => {
    updateComponentContainers();
  });
}

// 一次性更新所有组件容器
function updateComponentContainers() {
  // 更新行号容器
  if (rowNumbersRef.value && rowNumbersRef.value.updateContainerSize) {
    rowNumbersRef.value.updateContainerSize();
  }
  
  // 更新表格容器
  if (excelTableRef.value && excelTableRef.value.updateTableHeight) {
    excelTableRef.value.updateTableHeight();
  }
}

// 加载XLS文件并解析
async function loadXlsFile() {
  try {
    // 显示加载状态
    loading.value = true;
    
    // 获取文件
    const response = await fetch(`/api/files/download?file_id=${props.fileId}`);
    if (!response.ok) throw new Error('获取文件失败');
    
    const arrayBuffer = await response.arrayBuffer();
    const data = new Uint8Array(arrayBuffer);
    
    // 使用xlsx库解析
    const workbook = XLSX.read(data, { type: 'array' });
    
    // 打印工作表信息
    console.log(`工作表数量: ${workbook.SheetNames.length}`);
    
    sheetNames.value = workbook.SheetNames;
    
    if (sheetNames.value.length > 0) {
      activeSheet.value = sheetNames.value[0];
      parseSheet(workbook, activeSheet.value);
    }
  } catch (error) {
    console.error('解析XLS文件失败:', error);
    ElMessage.error('解析XLS文件失败: ' + error.message);
  } finally {
    loading.value = false;
  }
}

// 解析工作表
function parseSheet(workbook, sheetName) {
  const worksheet = workbook.Sheets[sheetName];
  const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
  
  // 解析合并单元格
  mergedCells.value = processMergedCells(worksheet);
  
  // 存储原始数据
  rawData.value = jsonData;
  
  // 处理表格数据
  processTableData();
  
  // 调试数据长度
  console.log(`原始数据长度: ${jsonData.length}, 处理后数据长度: ${processedData.value.length}, 行数组长度: ${rowsArray.value.length}`);
  
  // 更新完数据后，确保表格正确渲染和滚动同步
  nextTick(() => {
    // 重置滚动位置
    if (contentWrapperRef.value) {
      contentWrapperRef.value.scrollLeft = 0;
      contentWrapperRef.value.scrollTop = 0;
    }
    
    // 更新行号容器大小
    if (rowNumbersRef.value && rowNumbersRef.value.updateContainerSize) {
      rowNumbersRef.value.updateContainerSize();
    }
    
    // 同步滚动位置
    syncScrollPosition(0, 0);
  });
}

// 切换工作表
function changeSheet(sheetName) {
  activeSheet.value = sheetName
  
  // 重新加载当前工作表
  fetch(`/api/files/download?file_id=${props.fileId}`)
    .then(response => response.arrayBuffer())
    .then(buffer => {
      const data = new Uint8Array(buffer)
      const workbook = XLSX.read(data, { type: 'array' })
      parseSheet(workbook, sheetName)
    })
    .catch(error => {
      console.error('切换工作表失败:', error)
      ElMessage.error('切换工作表失败: ' + error.message)
    })
}

// 检测设备类型
function isMobileDevice() {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
}

// 初始化
onMounted(async () => {
  try {
    // 从window.previewParams获取文件信息，或者从props获取
    if (window.previewParams && window.previewParams.filePath) {
      fileUrl.value = window.previewParams.filePath
      fileName.value = window.previewParams.fileName || fileUrl.value.split('/').pop()
    } else if (props.filePath) {
      fileUrl.value = props.filePath
      fileName.value = props.filePath.split('/').pop()
    } else {
      throw new Error('未提供文件路径')
    }
    
    // 确定文件类型
    const fileExtension = fileName.value.split('.').pop().toLowerCase()
    isXlsx.value = fileExtension === 'xlsx'
    
    // 设置移动端列宽
    if (isMobileDevice()) {
      columnWidth.value = 80 // 移动端使用更窄的列宽
    }
    
    if (isXlsx.value) {
      // 直接使用VueOfficeExcel加载
      console.log('加载Excel文件:', fileUrl.value)
    } else {
      // 使用自定义解析加载其他格式
      await loadXlsFile()
    }
  } catch (error) {
    console.error('加载Excel文件失败:', error)
    ElMessage.error('加载Excel文件失败: ' + error.message)
  } finally {
    loading.value = false
  }
})

// 组件销毁前清理
onBeforeUnmount(() => {
  if (scrollTimer) {
    clearTimeout(scrollTimer)
    scrollTimer = null
  }
})

// Office Excel渲染完成回调
function handleRendered() {
  console.log('Excel渲染完成')
}

// Office Excel渲染错误回调
function handleError(error) {
  console.error('Office Excel渲染错误:', error)
  ElMessage.error('Office Excel渲染错误')
}
</script>

<style scoped>
.excel-preview-container {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
}

.custom-excel-preview {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  background-color: #f9f9f9;
  overflow: hidden;
}

.excel-main-container {
  display: flex;
  flex-direction: column;
  flex: 1;
  overflow: hidden;
  background-color: white;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  margin: 8px;
}

/* 顶部区域 */
.excel-top-row {
  display: flex;
  height: 30px;
  min-height: 30px;
  border-bottom: 1px solid #e0e0e0;
  z-index: 10;
  position: sticky;
  top: 0;
  background-color: white;
}

.excel-corner-cell {
  width: 40px;
  min-width: 40px;
  background-color: #f5f5f5;
  border-right: 1px solid #e0e0e0;
}

.excel-headers-wrapper {
  flex: 1;
  overflow: hidden;
  position: relative;
}

/* 主体区域 */
.excel-body-row {
  display: flex;
  flex: 1;
  overflow: hidden;
  position: relative;
}

.excel-row-numbers-wrapper {
  width: 40px;
  min-width: 40px;
  overflow: hidden;
  z-index: 5;
  position: sticky;
  left: 0;
  background-color: #f5f5f5;
}

.excel-content-wrapper {
  flex: 1;
  overflow: auto;
  position: relative;
  will-change: scroll-position;
  -webkit-overflow-scrolling: touch;
}

.excel-scroll-container {
  display: inline-block;
  min-width: 100%;
  min-height: 100%;
}

/* 滚动条样式 */
.excel-content-wrapper::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

.excel-content-wrapper::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

.excel-content-wrapper::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 4px;
}

.excel-content-wrapper::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

/* 加载动画 */
.loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  background-color: white;
}

.spinner {
  width: 40px;
  height: 40px;
  border: 3px solid #f3f3f3;
  border-top: 3px solid #3498db;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 10px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* 响应式样式 */
@media (max-width: 768px) {
  .excel-corner-cell {
    width: 32px;
    min-width: 32px;
  }
  
  .excel-row-numbers-wrapper {
    width: 32px;
    min-width: 32px;
  }
  
  .excel-content-wrapper::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
  
  .excel-main-container {
    margin: 4px;
  }
  
  .sheet-tabs {
    height: 32px;
    min-height: 32px;
  }
}

/* 触摸设备优化 */
@media (pointer: coarse) {
  .excel-content-wrapper {
    -webkit-overflow-scrolling: touch;
  }
  
  .excel-content-wrapper::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
}
</style> 