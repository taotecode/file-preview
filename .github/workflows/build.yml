name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Check config file
        run: |
          if [ ! -f "config/config.yaml" ]; then
            echo "Error: config/config.yaml not found"
            exit 1
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/file-preview:latest
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/file-preview:${{ github.ref_name }}

  build-binaries:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build binaries
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            pyinstaller --clean --onefile \
              --add-data "config/config.yaml:config" \
              --add-data "file_preview:file_preview" \
              --name "file-preview-linux-$(uname -m)" \
              file_preview/cli/main.py
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            pyinstaller --clean --onefile \
              --add-data "config/config.yaml:config" \
              --add-data "file_preview:file_preview" \
              --name "file-preview-mac-$(uname -m)" \
              file_preview/cli/main.py
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            pyinstaller --clean --onefile \
              --add-data "config/config.yaml;config" \
              --add-data "file_preview;file_preview" \
              --name "file-preview-win-$(uname -m)" \
              file_preview/cli/main.py
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: dist/

  release:
    needs: [build, build-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/binaries-ubuntu-latest/file-preview-linux-*
            artifacts/binaries-macos-latest/file-preview-mac-*
            artifacts/binaries-windows-latest/file-preview-win-*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 